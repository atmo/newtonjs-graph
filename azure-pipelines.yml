# Build numbering format
name: $(BuildID)

pool:
  vmImage: 'ubuntu-latest'

# Trigger
# -------

trigger:
  branches:
    include:
    - master
    - feat/*
    - refactor/*
    - release

# ---------
# Schedule
# ---------

schedules:
  - cron: "0 0 * * Mon"
    displayName: Weekly midnight build
    always: true
    branches:
      include:
      - master
      - releases/*


# Shared Templates
# ----------------

resources:
  repositories:
    - repository: templates
      type: github
      name: julie-ng/azure-pipelines-templates
      endpoint: julie-ng # required, even if public repo
      ref: refs/tags/v1.2.0


# Variables
# ---------

variables:
  - group: newton-common-vars

  - name: app-name
    value: newton-demo

  - name: image-tag
    value: 'dev'

  - name: image-name
    value: $(lib-registry-namespace)/$(app-name)

  - name: image-name-with-registry
    value: $(lib-registry-host)/$(image-name)

  - name: is-release
    value: ${{ and(eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule')) }}

# ------
# Stages
# ------

stages:

# Tests
# -----

- stage: CI
  displayName: 'Test'
  jobs:
    - job: Audit
      steps:
      - script: npm audit
        displayName: Audit Dependencies (all)
        continueOnError: true

      - script: npm audit --production
        displayName: Audit Dependencies (prod-only)
        continueOnError: false

    - job: Linter
      steps:
      - script: npm ci && npm run lint
        displayName: Lint Code

    - job: Tests
      steps:
      - script: npm ci && npm run test
        displayName: Unit Tests


# Docker: Build and Push
# ----------------------

# --- Stage: Build and Push Docker image ---

- stage: BuildImage
  displayName: 'Build (Docker)'
  jobs:
    - job: build_and_push
      displayName: 'Build and Push Image'

      steps:
      # 1
      - script: npm install
        displayName: 'NPM: install'

      # 2
      - script: npm run build
        displayName: 'NPM: build library'

      # 3
      - script: npm run demo:build
        displayName: 'NPM: build demo'

      # 4
      - template: steps/set-custom-variable.yml@templates
        parameters:
          variableName: image-tag
          command: 'npm run --silent my-version'
          # Override image tag with versioned release tag
          condition: $(is-release)

      # 5 - buld and push images only master or release
      - template: steps/docker-build-push.yml@templates
        parameters:
          registryConnectionName: $(lib-acr-connection)
          imageName: $(image-name)
          tagsAsMultilineString: |
            $(image-tag)
          condition: $(is-release)

      # 6 - lock release images
      - task: AzureCLI@2
        displayName: 'Lock release image, preventing delete'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule'))
        inputs:
          azureSubscription: $(lib-arm-connection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
              az --version
              az acr repository update \
                --name $(lib-acr-name) --image $(image-name):$(image-tag) \
                --write-enabled false


# --- Stage: deploy to Azure App Services ---

- stage: DeployImage
  displayName: Deploy
  jobs:

  - job: deploy_master
    displayName: 'Deploy (master)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) # TODO: update library
    steps:
      - template: steps/deploy-app-service.yml@templates
        parameters:
          ARMConnectionName: $(lib-arm-connection)
          dockerImage: $(image-name-with-registry):$(image-tag)
          appName: $(app-name)-dev # with `-dev` suffix

  - job: deploy_release
    displayName: 'Deploy (release)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule'))
    steps:
      # Override image tag with versioned release tag
      - template: steps/set-custom-variable.yml@templates
        parameters:
          variableName: image-tag
          command: 'npm run --silent my-version'

      - template: steps/deploy-app-service.yml@templates
        parameters:
          ARMConnectionName: $(lib-arm-connection)
          dockerImage: $(image-name-with-registry):$(image-tag)
          appName: $(app-name)
