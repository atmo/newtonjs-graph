# Build numbering format
name: $(BuildID)

pool:
  vmImage: 'ubuntu-latest'

trigger:
  - master
  - feat/*
  - fix/*

# ---------
# Schedule
# ---------

schedules:
  - cron: "0 0 * * Mon"
    displayName: Weekly midnight build
    always: true
    branches:
      include:
      - master
      - releases/*

# ---------
# Variables
# ---------

variables:
  # all variables prefixed `newton-` come from library
  - group: newton-common-vars

  # this pipeline:
  - name:  image-namespace
    value: demo

  - name:  image-name
    value: graph

  - name:  docker-image
    value: $(newton-registry)/$(newton-demo-namespace)/$(image-name)

  - name: snapshot-tag
    value: $(docker-image):$(Build.BuildId)

  - name: dev-tag
    value: $(docker-image):dev

# ------
# Stages
# ------

stages:

# Tests
# -----

- stage: CI
  displayName: 'Test (Node.js)'
  jobs:
    - job: Audit
      steps:
      - script: npm audit
        displayName: Audit Dependencies
        continueOnError: true

    - job: Linter
      steps:
      - script: npm ci && npm run lint
        displayName: Lint Code

    - job: Tests
      steps:
      - script: npm ci && npm run test
        displayName: Unit Tests

# Docker: Build and Push
# ----------------------

- stage: BuildImage
  displayName: 'Build'
  jobs:
  - job: build_js
    displayName: Build JS, Docker and Push
    steps:
    - script: npm install
      displayName: 'NPM: install'

    - script: npm run build
      displayName: 'NPM: build library'

    - script: npm run demo:build
      displayName: 'NPM: build demo'

    - script: |
        echo '##vso[task.setvariable variable=build-sha]'$(git rev-parse --short HEAD)''
        echo 'buildSha set to $(build-sha)'
      displayName: 'Git: get commit sha'

    - script: |
        docker build --tag $(snapshot-tag)-$(build-sha) .
        docker tag $(snapshot-tag)-$(build-sha) $(dev-tag)
      displayName: 'Docker: build and tag image'

    - task: Docker@1 # Use the task to avoid embedding credentials in pipeline
      displayName: 'Docker: login ACR'
      inputs:
        command: login
        azureSubscriptionEndpoint: $(newton-service-connection)
        azureContainerRegistry: $(newton-registry)

    - script: docker push $(snapshot-tag)-$(build-sha)
      displayName: 'Docker: push snapshot'

    - script: docker push $(dev-tag)
      displayName: 'Docker: push dev'

    - script: docker logout $(newton-registry)
      displayName: 'Docker: logout ACR'

# Deploy to App Services
# ----------------------

- stage: DeployDemo
  displayName: Deploy Demo
  jobs:
  - job: deploy_image
    displayName: 'Deploy Image (master)'
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'App Services: deploy container'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) # (master branch and succesful builds only)
      inputs:
        appName: $(pipeline-app-name) # var set in pipeline
        azureSubscription: $(newton-service-connection)
        imageName: $(snapshot-tag)
